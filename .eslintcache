[{"/home/sheraram/Projects/React/to-do-list/src/index.js":"1","/home/sheraram/Projects/React/to-do-list/src/App.js":"2","/home/sheraram/Projects/React/to-do-list/src/components/Form.js":"3","/home/sheraram/Projects/React/to-do-list/src/components/Todo.js":"4","/home/sheraram/Projects/React/to-do-list/src/components/FilterButton.js":"5"},{"size":218,"mtime":1608992302171,"results":"6","hashOfConfig":"7"},{"size":2723,"mtime":1609676885328,"results":"8","hashOfConfig":"7"},{"size":902,"mtime":1609676880449,"results":"9","hashOfConfig":"7"},{"size":2801,"mtime":1609680256045,"results":"10","hashOfConfig":"7"},{"size":363,"mtime":1609680089476,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"gd6xut",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/home/sheraram/Projects/React/to-do-list/src/index.js",[],["24","25"],"/home/sheraram/Projects/React/to-do-list/src/App.js",["26"],"import React, { useEffect, useRef, useState } from 'react'\nimport FilterButton from './components/FilterButton';\nimport Form from './components/Form';\nimport Todo from './components/Todo';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('All');\n\n  const addTask = name => {\n    const newTask = { id: Date.now(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n  const deleteTask = (id) => {\n    const remainingTasks = tasks.filter(task => task.id !== id);\n    setTasks(remainingTasks);\n  }\n  const toggleTaskCompleted = (id) => {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task \n      if (id === task.id) {\n        // use object spread to make a new obkect\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  const editTask = (id, newName) => {\n    const editedTaskList = tasks.map(task => {\n      // if this task has same ID as the edited task\n      if (id === task.id) {\n        return { ...task, name: newName };\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      editTask={editTask}\n      deleteTask={deleteTask}\n    />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      setFilter={setFilter}\n    />\n  ))\n\n  const taskNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${taskNoun} remaining`;\n\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  return (\n    <div className='box-todo'>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n        {headingText}\n      </h2>\n      <ul\n        role='list'\n        className='todo-list'\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","/home/sheraram/Projects/React/to-do-list/src/components/Form.js",[],"/home/sheraram/Projects/React/to-do-list/src/components/Todo.js",[],"/home/sheraram/Projects/React/to-do-list/src/components/FilterButton.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":98,"column":7,"nodeType":"33","endLine":101,"endColumn":8},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]