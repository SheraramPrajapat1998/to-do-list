{"version":3,"sources":["components/FilterButton.js","components/Form.js","components/Todo.js","App.js","index.js"],"names":["FilterButton","props","name","setFilter","active","Button","type","color","variant","onClick","Form","useState","setName","Paper","elevation","onSubmit","e","preventDefault","trim","addTask","FormControl","InputLabel","htmlFor","Input","id","placeholder","value","onChange","target","IconButton","aria-label","AddCircleRounded","Todo","task","toggleTaskCompleted","editTask","deleteTask","completed","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","className","CloseRounded","disabled","viewTemplate","Checkbox","toString","checked","style","display","padding","EditOutlined","DeleteRounded","focus","ListItem","ListItemText","FILTER_MAP","All","Active","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","remainingTasks","updatedTasks","map","editedTaskList","taskList","filterList","taskNoun","length","headingText","listHeadingRef","prevTaskLength","darkMode","setDarkMode","darkTheme","createMuiTheme","palette","primary","purple","lightTheme","ThemeProvider","theme","height","Typography","Switch","newTask","Date","now","ButtonGroup","disableElevation","size","tabIndex","List","role","Link","href","GitHub","fontSize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcfb7b45.chunk.js","sourcesContent":["import { Button } from '@material-ui/core';\nimport React from 'react'\n\nconst FilterButton = (props) => {\n  const { name, setFilter, active } = props;\n  return (\n    <Button\n      type=\"button\"\n      color=\"primary\"\n      variant=\"contained\"\n      onClick={() => setFilter(name)}\n    >\n      Show {name} tasks\n    </Button>\n  );\n}\n\nexport default FilterButton;\n","import {\n  FormControl,\n  IconButton,\n  Input,\n  InputLabel,\n  Paper,\n} from \"@material-ui/core\";\nimport { AddCircleRounded } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\n\nconst Form = (props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleChange = (e) => {\n    setName(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!name.trim()) {\n      return;\n    }\n    props.addTask(name);\n    setName(\"\");\n  };\n\n  return (\n    <Paper elevation={0}>\n      <form onSubmit={handleSubmit}>\n        <FormControl>\n          <InputLabel htmlFor=\"new-todo-input\">\n            What needs to be done?\n          </InputLabel>\n          <Input\n            type=\"text\"\n            id=\"new-todo-input\"\n            name=\"text\"\n            placeholder=\"Add subtask\"\n            value={name}\n            onChange={handleChange}\n          />\n        </FormControl>\n        <IconButton type=\"submit\" variant=\"outlined\" aria-label=\"add\">\n          <AddCircleRounded />\n        </IconButton>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n","import {\n  Button,\n  Input,\n  InputLabel,\n  ListItem,\n  ListItemText,\n  Checkbox,\n  FormControl,\n} from \"@material-ui/core\";\nimport { CloseRounded, DeleteRounded, EditOutlined } from \"@material-ui/icons\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst Todo = ({ task, toggleTaskCompleted, editTask, deleteTask }) => {\n  const { id, name, completed } = task;\n\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState(\"\");\n\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n\n  const wasEditing = usePrevious(isEditing);\n\n  const handleChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!newName.trim()) {\n      return;\n    }\n    editTask(id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  };\n\n  const editingTemplate = (\n    <FormControl onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <InputLabel htmlFor={id} className=\"todo-label\">\n          New name for {name}\n        </InputLabel>\n        <Input\n          type=\"text\"\n          id={id}\n          className=\"todo-text\"\n          value={newName}\n          onChange={handleChange}\n          ref={editFieldRef}\n        />\n      </div>\n      <div className=\"btn-group\">\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          type=\"button\"\n          className=\"btn todo-cancel\"\n          onClick={() => setEditing(false)}\n        >\n          <CloseRounded /> <span>remaining {name}</span>\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={!newName}\n        >\n          Save\n        </Button>\n      </div>\n    </FormControl>\n  );\n\n  const viewTemplate = (\n    <div className={`todolist-box`}>\n      <div className=\"todo-items\">\n        <Checkbox\n          color=\"primary\"\n          id={id.toString()}\n          type=\"checkbox\"\n          checked={completed}\n          onChange={() => toggleTaskCompleted(id)}\n        />\n        <InputLabel\n          style={{ display: \"inline\", padding: \"10px 10px\" }}\n          htmlFor={id}\n          className={`${completed ? \"todo-label line-through\" : \"todo-label\"}`}\n        >\n          {name}\n        </InputLabel>\n      </div>\n      <div className=\"btn-group\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"button\"\n          className=\"btn btnEdit\"\n          onClick={() => setEditing(true)}\n          ref={editButtonRef}\n        >\n          <EditOutlined />\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          type=\"button\"\n          className=\"btn btnDelete\"\n          onClick={() => deleteTask(id)}\n        >\n          <DeleteRounded />\n        </Button>\n      </div>\n    </div>\n  );\n\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFieldRef.current.focus();\n    }\n    if (wasEditing && !isEditing) {\n      editButtonRef.current.focus();\n    }\n  }, [wasEditing, isEditing]);\n\n  return (\n    <ListItem>\n      <ListItemText className=\"todo\">\n        {isEditing ? editingTemplate : viewTemplate}\n      </ListItemText>\n    </ListItem>\n  );\n};\n\nexport default Todo;\n","import {\n  ButtonGroup,\n  createMuiTheme,\n  IconButton,\n  Link,\n  List,\n  Paper,\n  Switch,\n  ThemeProvider,\n  Typography,\n} from \"@material-ui/core\";\nimport { purple } from \"@material-ui/core/colors\";\nimport { GitHub } from \"@material-ui/icons\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport FilterButton from \"./components/FilterButton\";\nimport Form from \"./components/Form\";\nimport Todo from \"./components/Todo\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed,\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nconst App = () => {\n  const [tasks, setTasks] = useState([\n    { name: \"task1\", id: 1, completed: false },\n    { name: \"task2\", id: 2, completed: true },\n  ]);\n  const [filter, setFilter] = useState(\"All\");\n\n  const addTask = (name) => {\n    const newTask = { id: Date.now(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  };\n  const deleteTask = (id) => {\n    const remainingTasks = tasks.filter((task) => task.id !== id);\n    setTasks(remainingTasks);\n  };\n  const toggleTaskCompleted = (id) => {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new obkect\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n  const editTask = (id, newName) => {\n    const editedTaskList = tasks.map((task) => {\n      // if this task has same ID as the edited task\n      if (id === task.id) {\n        return { ...task, name: newName };\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  };\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map((task) => (\n      <Todo\n        key={task.id}\n        task={task}\n        toggleTaskCompleted={toggleTaskCompleted}\n        editTask={editTask}\n        deleteTask={deleteTask}\n      />\n    ));\n\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton key={name} name={name} setFilter={setFilter} active={name} />\n  ));\n\n  const taskNoun = taskList.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${taskNoun} remaining`;\n\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  const [darkMode, setDarkMode] = useState(false);\n\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: \"dark\",\n      primary: purple,\n    },\n  });\n  const lightTheme = createMuiTheme({\n    palette: {\n      type: \"light\",\n    },\n  });\n\n  return (\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\n      <Paper style={{ height: \"100vh\" }}>\n        <div className=\"toggle-dark-mode\">\n          <Typography variant=\"h6\" color=\"textPrimary\">\n            Toggle Dark Mode\n            <Switch\n              checked={darkMode}\n              onChange={() => setDarkMode(!darkMode)}\n            />\n          </Typography>\n        </div>\n        <div className=\"box-todo\">\n          <Form addTask={addTask} />\n\n          <div className=\"app__filter-button-group filters btn-group\">\n            <ButtonGroup disableElevation size=\"large\" color=\"secondary\">\n              {filterList}\n            </ButtonGroup>\n          </div>\n          <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n            {headingText}\n          </h2>\n          <List role=\"list\" className=\"todo-list\">\n            {taskList}\n          </List>\n\n          <div className=\"github-user\">\n            <IconButton color=\"primary\" aria-label=\"SheraramPrajapat1998\">\n              <Link\n                href=\"https://github.com/SheraramPrajapat1998\"\n                target=\"_blank\"\n              >\n                <GitHub fontSize=\"large\" />\n              </Link>\n            </IconButton>\n          </div>\n        </div>\n      </Paper>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport { green, purple } from \"@material-ui/core/colors\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}